{
  "author": {
    "name": "Vadim Graboys",
    "email": "dimva13@gmail.com"
  },
  "name": "bintrees",
  "description": "Binary Search Trees",
  "version": "0.0.7",
  "homepage": "bitfloor.com",
  "keywords": [
    "binary tree",
    "red black tree",
    "red-black tree",
    "redblack tree"
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/vadimg/js_bintrees.git"
  },
  "directories": {
    "lib": "lib"
  },
  "main": "./index.js",
  "scripts": {
    "test": "./node_modules/.bin/expresso ./test/test_*.js; ./node_modules/.bin/jshint lib/*.js"
  },
  "dependencies": {},
  "devDependencies": {
    "underscore": ">=1.1.7",
    "expresso": ">=0.8.1",
    "jshint": ">=0.5.2"
  },
  "readme": "Binary Trees\n============\n\nThis package provides Binary and Red-Black Search Trees written in Javascript. It is released under the MIT License.\n\nBinary Search Trees are a good way to store data in sorted order. A Red-Black tree is a variation of a Binary Tree that balances itself.\n\nAlgorithms were taken from Julienne Walker: http://eternallyconfuzzled.com/jsw_home.aspx\n\nTrees\n------------\n\n* BinTree - Binary Search Tree\n* RBTree - Red-Black Tree\n\nQuickstart\n------------\nCommonJS:\n    var Tree = require('bintrees').RBTree;\n\n    see /test/test_simple.js for more info\n\nIn the browser:\n    <script src=\"/path/to/treebase.js\"></script>\n    <script src=\"/path/to/rbtree.js\"></script>\n    <script>\n        var Tree = bintrees.RBTree;\n    </script>\n\n    see /test/test.html for more info\n\nConstructor\n------------\n\nRequires 1 argument: a comparator function f(a,b) which returns:\n* 0 if a == b\n* >0 if a > b\n* <0 if a < b\n\nMethods\n------------\n\n* insert(item)\n* remove(item)\n* clear()\n* find(item)\n* min()\n* max()\n* each(f)\n* reach(f)\n* iterator()\n\nSee the comments inside the lib directory for more info.\n\nIterators\n------------\n\ntree.iterator() will return a null-iterator. On a null iterator,\n* next() will return the first element in the tree\n* prev() will return the last element in the tree\n\nOtherwise,\n* next() will return the next element\n* prev() will return the previous element\n\nWhen iteration reaches the end, the iterator becomes a null-iterator again.\n\nForward iteration example:\nvar it=tree.iterator(), item;\nwhile((item = it.next()) !== null) {\n    // do stuff with item\n}\n\nIf you are iterating forward through the tree, you can always call prev() to go back, and vice versa.\n",
  "_id": "bintrees@0.0.7",
  "dist": {
    "shasum": "3410e386f50ba1414cc506362a2364f8f712a2e2"
  },
  "_from": "bintrees"
}
